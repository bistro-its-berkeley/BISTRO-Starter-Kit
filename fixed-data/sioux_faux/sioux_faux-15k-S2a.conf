include "../common/matsim.conf"
include "../common/akka.conf"

##################################################################
# SIMULATION
##################################################################
beam.agentsim.simulationName = "sioux_faux-15k-S2a"
beam.agentsim.numAgents = 15000
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 100
beam.agentsim.thresholdForWalkingInMeters = 200
beam.agentsim.thresholdForMakingParkingChoiceInMeters = 200
beam.agentsim.schedulerParallelismWindow = 120
beam.agentsim.timeBinSize = 3600
beam.agentsim.startTime = "00:00:00"
beam.agentsim.endTime = "30:00:00"

# MODE CHOICE OPTIONS:
# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable
# ModeChoiceUniformRandom ModeChoiceLCCM
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceMultinomialLogit"
beam.agentsim.agents.modalBehaviors.defaultValueOfTime = 18
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.transfer = 0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.car_intercept = 0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_transit_intercept = 0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.drive_transit_intercept = -2
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_intercept = 0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_intercept = -4
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_pooled_intercept=1
beam.agentsim.agents.modalBehaviors.lccm.paramFile = ${beam.inputDirectory}"/lccm-long.csv"
beam.agentsim.agents.modeIncentive.filePath = "submission-inputs/ModeIncentives.csv"
beam.agentsim.agents.ptFare.filePath = "submission-inputs/MassTransitFares.csv"
beam.agentsim.agents.plans {
  inputPlansFilePath = ${beam.inputDirectory}"/scenarios/S2a/population.xml"
  inputPersonAttributesFilePath = ${beam.inputDirectory}"/scenarios/S2a/populationAttributes.xml"
}
beam.agentsim.agents.households {
  inputFilePath = ${beam.inputDirectory}"/scenarios/S2a/households.xml"
  inputHouseholdAttributesFilePath = ${beam.inputDirectory}"/scenarios/S2a/householdAttributes.xml"
}
# Population Adjustmnet (DEFAULT_ADJUSTMENT | PERCENTAGE_ADJUSTMENT)
beam.agentsim.populationAdjustment = "DEFAULT_ADJUSTMENT"
#Toll params
beam.agentsim.toll.filePath ="submission-inputs/RoadPricing.csv"
#TAZ params
beam.agentsim.taz.filePath = ${beam.inputDirectory}"/taz-centers.csv"
beam.agentsim.taz.parkingFilePath = ${beam.inputDirectory}"/parking/taz-parking.csv-default.csv"
# Scaling and Tuning Params
beam.agentsim.tuning.transitCapacity = 1.0
beam.agentsim.tuning.transitPrice = 1.0
beam.agentsim.tuning.rideHailPrice = 1.0
# Use bikes?
beam.agentsim.agents.vehicles.bicycles.useBikes = false
#BeamVehicles Params
beam.agentsim.agents.vehicles.fuelTypesFilePath = ${beam.inputDirectory}"/beamFuelTypes.csv"

beam.agentsim.agents.vehicles.fuelTypesFilePath = ${beam.inputDirectory}"/scenarios/S2a/beamFuelTypes.csv"
beam.agentsim.agents.vehicles.vehicleTypesFilePath = ${beam.inputDirectory}"/scenarios/S2a/vehicleTypes.csv"
beam.agentsim.agents.vehicles.transitVehicleTypesByRouteFile = "submission-inputs/VehicleFleetMix.csv"
beam.agentsim.agents.vehicles.vehiclesFilePath = ${beam.inputDirectory}"/scenarios/S2a/vehicles.csv"
beam.agentsim.agents.vehicles.sharedFleets = []
beam.agentsim.agents.rideHail.initialization.initType="PROCEDURAL"

###########################
# Physsim
###########################
beam.physsim.inputNetworkFilePath = ${beam.inputDirectory}"/r5/physsim-network.xml"
beam.physsim.flowCapacityFactor = 0.1
beam.physsim.storageCapacityFactor = 0.3
beam.physsim.writeMATSimNetwork = false
beam.physsim.ptSampleSize = 0.1
beam.physsim.jdeqsim.agentSimPhysSimInterfaceDebugger.enabled = false
beam.physsim.skipPhysSim = false


###########################
# Replanning
###########################
beam.replanning{
  maxAgentPlanMemorySize = 4
  Module_1 = "SelectExpBeta"
  ModuleProbability_1 = 0.8
  Module_2 = "ClearRoutes"
  ModuleProbability_2 = 0.1
  Module_3 = "ClearModes"
  ModuleProbability_3 = 0.1
  Module_4 = "TimeMutator"
  ModuleProbability_4 = 0.0
}


##################################################################
# Warm Mode
##################################################################
beam.warmStart.enabled = true
#PATH can be a directory or zip archive of the output directory (e.g. like what get's stored on S3), including a URL to an S3 output.
beam.warmStart.path = ${beam.inputDirectory}"/bau/warm-start/sioux_faux-15k__warm-start.zip"

##################################################################
# RideHail
##################################################################
# Initialization Type(PROCEDURAL | FILE)
beam.agentsim.agents.rideHail.initialization.initType = "PROCEDURAL"
# If PROCEDURAL, use these params
# initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
beam.agentsim.agents.rideHail.initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
beam.agentsim.agents.rideHail.initialization.procedural.initialLocation.home.radiusInMeters = 500
beam.agentsim.agents.rideHail.initialization.procedural.vehicleTypeId="CAR-TYPE-DEFAULT"
beam.agentsim.agents.rideHail.initialization.procedural.numDriversAsFractionOfPopulation = 0.15
# If FILE, use this param
beam.agentsim.agents.rideHail.initialization.filename=${beam.inputDirectory}"/rideHailFleet.csv"
# Ride Hailing General Params
beam.agentsim.agents.rideHail.defaultCostPerMile = 1.00
beam.agentsim.agents.rideHail.defaultCostPerMinute = 0.50
beam.agentsim.agents.rideHail.refuelThresholdInMeters = 5000.0
beam.agentsim.agents.rideHail.refuelLocationType = "AtRequestLocation"
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep = 0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel = 0.1

# priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy = "KEEP_PRICE_LEVEL_FIXED_AT_ONE"

beam.agentsim.agents.rideHail.rideHailManager.radiusInMeters = 5000

# allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | EV_MANAGER)
beam.agentsim.agents.rideHail.allocationManager.name="POOLING_ALONSO_MORA"
beam.agentsim.agents.rideHail.allocationManager.repositionTimeoutInSeconds = 0
beam.agentsim.agents.rideHail.allocationManager.requestBufferTimeoutInSeconds = 150
beam.agentsim.agents.rideHail.allocationManager.randomRepositioning.repositioningShare=0.2
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.005
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
# repositioningMethod(TOP_SCORES | KMEANS)
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.demandWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.produceDebugImages=true



beam.agentsim.agents.rideHail.iterationStats.timeBinSizeInSec = 3600



beam.agentsim.scenarios.frequencyAdjustmentFile="submission-inputs/FrequencyAdjustment.csv"
##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = false
beam.debug.actor.logDepth = 10
beam.debug.stuckAgentDetection {
  "checkIntervalMs": 200,
  "checkMaxNumberOfMessagesEnabled": true,
  "defaultTimeoutMs": 60000,
  "enabled": true,
  thresholds = [
    {
      triggerType = "beam.agentsim.agents.PersonAgent$ActivityStartTrigger"
      markAsStuckAfterMs = "20s"
      actorTypeToMaxNumberOfMessages {
        population = 1
      }
    },
    {
      triggerType = "beam.agentsim.agents.PersonAgent$ActivityEndTrigger"
      markAsStuckAfterMs = "60s"
      actorTypeToMaxNumberOfMessages {
        population = 15
      }
    },
    {
      triggerType = "beam.agentsim.agents.PersonAgent$PersonDepartureTrigger"
      markAsStuckAfterMs = "20s"
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
    },
    {
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$StartLegTrigger"
      markAsStuckAfterMs = "18s"
      actorTypeToMaxNumberOfMessages {
        population = 60
        transitDriverAgent = 150
        rideHailAgent = 250
      }
    },
    {
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$EndLegTrigger"
      markAsStuckAfterMs = "60s"
      actorTypeToMaxNumberOfMessages {
        population = 60
        transitDriverAgent = 150
        rideHailAgent = 250
      }
    },
    {
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$AlightVehicleTrigger"
      markAsStuckAfterMs = "21s"
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
    },
    {
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$BoardVehicleTrigger"
      markAsStuckAfterMs = "21s"
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
    },
    {
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$StartRefuelTrigger"
      markAsStuckAfterMs = "21s"
      actorTypeToMaxNumberOfMessages {
        rideHailAgent = 10
      }
    },
    {
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$EndRefuelTrigger"
      markAsStuckAfterMs = "21s"
      actorTypeToMaxNumberOfMessages {
        rideHailAgent = 10
      }
    },
    {
      triggerType = "beam.agentsim.agents.InitializeTrigger"
      markAsStuckAfterMs = "20s"
      actorTypeToMaxNumberOfMessages {
        population = 1
        transitDriverAgent = 1
        rideHailAgent = 1
        rideHailManager = 1
      }
    },
    {
      triggerType = "beam.agentsim.agents.ridehail.RideHailManager$BufferedRideHailRequestsTrigger"
      markAsStuckAfterMs = "20s"
      actorTypeToMaxNumberOfMessages {
        rideHailManager = 108000 // 30 hours * 3600 seconds per hour
      }
    },
    {
      triggerType = "beam.agentsim.agents.ridehail.RideHailManager$RideHailRepositioningTrigger"
      markAsStuckAfterMs = "40s"
      actorTypeToMaxNumberOfMessages {
        rideHailManager = 361
      }
    },
    {
      triggerType = "beam.agentsim.scheduler.BeamAgentScheduler$KillTrigger"
      markAsStuckAfterMs = "30s"
      actorTypeToMaxNumberOfMessages {
        beamAgentScheduler = 100
        transitDriverAgent = 100
      }
    },
  ]

}

##################################################################
# Non-common Metrics
##################################################################
beam.metrics.level = "off"
kamon {
  metric {
    filters {
      akka-actor {
        includes = ["beam-actor-system/user/router/**", "beam-actor-system/user/worker-*"]
        excludes = ["beam-actor-system/system/**", "beam-actor-system/user/worker-helper"]
      }
      akka-dispatcher {
        includes = ["beam-actor-system/akka.actor.default-dispatcher"]
      }
    }
  }
}

##################################################################
# OUTPUTS
##################################################################
# The outputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "beamville_2017-12-18_16-48-57"
beam.outputs.baseOutputDirectory = ${PWD}"/output/sioux_faux"
beam.outputs.baseOutputDirectory = ${?BEAM_OUTPUT}
beam.outputs.addTimestampToOutputDirectory = true
beam.outputs.writeGraphs = true
beam.outputs.displayPerformanceTimings = false

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.defaultWriteInterval = 1
beam.outputs.writePlansInterval = ${beam.outputs.defaultWriteInterval}
beam.outputs.writeLinkTraversalInterval = 1
beam.outputs.writeEventsInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.writeEventsInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.writePlansInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.linkStatsWriteInterval = 1
beam.physsim.writeMATSimNetwork = false
# The remaining params customize how events are written to output files
beam.outputs.events.fileOutputFormats = "xml.gz" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# Events Writing Logging Levels:
beam.outputs.events.eventsToWrite = "ActivityEndEvent,ActivityStartEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,ModeChoiceEvent,PathTraversalEvent,ReserveRideHailEvent,RefuelEvent,ReplanningEvent,ParkEvent,LeavingParkingEvent,PersonCostEvent"
beam.outputs.stats.binSize = 3600

##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:26914"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 10000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  baseDate = "2018-11-14T00:00:00-06:00"
  transitOnStreetNetwork = true # PathTraversalEvents for transit vehicles
  r5 {
    directory = ${beam.inputDirectory}"/r5"
    # Departure window in min
    departureWindow = 1.0167
    osmFile = ${beam.inputDirectory}"/r5/sioux_falls_2016.pbf"
    osmMapdbFile = ${beam.inputDirectory}"/r5/osm.mapdb"
    mNetBuilder.fromCRS = "EPSG:4326" # WGS84
    mNetBuilder.toCRS = "epsg:26914"     # UTM10N
  }
}

beam.routing.startingIterationForTravelTimesMSA = 800

##################################################################
# MATSim Conversion
##################################################################

matsim.conversion {
  scenarioDirectory = "C:\\Users\\sidfe\\current_code\\scala\\BeamCompetitions\\fixed-data\\sioux_faux"
  populationFile = "population.xml"
  matsimNetworkFile = "network.xml"
  generateVehicles = true
  vehiclesFile = "vehicles.xml"
  defaultHouseholdIncome {
    currency = "usd"
    period = "year"
    value = 50000
  }
  osmFile = "sioux_falls_2016.pbf"
  shapeConfig {
    shapeFile = "tz46_d00_utm.shp"
    tazIdFieldName = "TZ46_D00_I"
  }
}
##################################################################
# Calibration
##################################################################
beam.calibration.objectiveFunction = "ModeChoiceObjectiveFunction"
beam.calibration.mode.benchmarkFilePath=${beam.inputDirectory}"/calibration/benchmark.csv"
beam.calibration.counts {
  countsScaleFactor = 10.355
  writeCountsInterval = 0
  averageCountsOverIterations = ${beam.outputs.defaultWriteInterval}
}
##################################################################
# Custom attributes
##################################################################
beam.competition.submissionScoreMSAOverNumberOfIters=10
